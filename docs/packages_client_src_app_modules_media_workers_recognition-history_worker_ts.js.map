{"version":3,"file":"packages_client_src_app_modules_media_workers_recognition-history_worker_ts.js","mappings":";;;;;AAAA;AAQA,MAAMA,wBAAwB;EAA9BC,YAAA;IACU,KAAAC,iBAAiB,GAA0B,IAAIC,GAAG,EAAE;EAW9D;EATSC,WAAWA,CAACC,QAAgB,EAAEC,OAAe;IAClD,MAAMC,QAAQ,GAAa,IAAI,CAACL,iBAAiB,CAACM,GAAG,CAACH,QAAQ,CAAC,IAAI,EAAE;IACrEE,QAAQ,CAACE,IAAI,CAACH,OAAO,CAAC;IACtB,IAAI,CAACJ,iBAAiB,CAACQ,GAAG,CAACL,QAAQ,EAAEE,QAAQ,CAAC;EAChD;EAEOI,qBAAqBA,CAACN,QAAgB;IAC3C,OAAO,IAAI,CAACH,iBAAiB,CAACM,GAAG,CAACH,QAAQ,CAAC;EAC7C;;AAGF,MAAMO,aAAa,GAAG,IAAIZ,wBAAwB,EAAE;AAEpDa,gBAAgB,CAAC,SAAS,EAAE,CAAC;EAAEC;AAAI,CAA0B,KAAI;EAC/D,IAAI;IACF,QAAQA,IAAI,CAACC,IAAI;MACf,KAAK,KAAK;QACRH,aAAa,CAACR,WAAW,CAACU,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACR,OAAiB,CAAC;QAC1DW,WAAW,CAAC;UAACD,EAAE,EAAEF,IAAI,CAACE,EAAE;UAAEE,MAAM,EAAE;QAAI,CAAC,CAAC;QACxC;MACF,KAAK,KAAK;QACRD,WAAW,CAAC;UAACD,EAAE,EAAEF,IAAI,CAACE,EAAE;UAAEE,MAAM,EAAE,IAAI;UAAEX,QAAQ,EAAEK,aAAa,CAACD,qBAAqB,CAACG,IAAI,CAACE,EAAE;QAAC,CAAC,CAAC;QAChG;MACF;QACEC,WAAW,CAAC;UAACD,EAAE,EAAEF,IAAI,CAACE,EAAE;UAAEE,MAAM,EAAE;QAAa,CAAC,CAAC;QACjD;IAAM;GAEX,CAAC,OAAMC,CAAM,EAAE;IACdF,WAAW,CAAC;MAACD,EAAE,EAAEF,IAAI,CAACE,EAAE;MAAEE,MAAM,EAAE,QAAQ;MAAEE,KAAK,EAAED,CAAC,CAACb;IAAO,CAAC,CAAC;;AAElE,CAAC,CAAC,C","sources":["./packages/client/src/app/modules/media/workers/recognition-history.worker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n\ninterface HistoryRequest {\n  type: 'put' | 'get';\n  id: string;\n  message?: string;\n}\n\nclass RecognitionHistoryWorker {\n  private messageHistoryMap: Map<string, string[]> = new Map();\n\n  public addToThread(threadId: string, message: string): void {\n    const messages: string[] = this.messageHistoryMap.get(threadId) || [];\n    messages.push(message);\n    this.messageHistoryMap.set(threadId, messages)\n  }\n\n  public getMessagesFromThread(threadId: string): string[] | undefined {\n    return this.messageHistoryMap.get(threadId);\n  }\n}\n\nconst historyWorker = new RecognitionHistoryWorker();\n\naddEventListener('message', ({ data }: {data: HistoryRequest}) => {\n  try {\n    switch (data.type) {\n      case 'put': \n        historyWorker.addToThread(data.id, data.message as string);\n        postMessage({id: data.id, status: 'OK'})\n        break;\n      case 'get':\n        postMessage({id: data.id, status: 'OK', messages: historyWorker.getMessagesFromThread(data.id)});\n        break;\n      default:\n        postMessage({id: data.id, status: 'BAD REQUEST'});\n        break;\n    }\n  } catch(e: any) {\n    postMessage({id: data.id, status: 'FAILED', error: e.message});\n  }\n});"],"names":["RecognitionHistoryWorker","constructor","messageHistoryMap","Map","addToThread","threadId","message","messages","get","push","set","getMessagesFromThread","historyWorker","addEventListener","data","type","id","postMessage","status","e","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}